import org.jetbrains.intellij.tasks.RunPluginVerifierTask

plugins {
    id "idea"
    id "java"
    id 'org.jetbrains.intellij' version '1.5.3'
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.4.32'
}

ext {
    kotlin_version = '1.4.32'
}

// The latest supported versions. Note, these are updated automatically from update-major-versions.sh
def IIC_VERSION = '222.3345.118'
def GO_VERSION = '222.3345.118'
// Unfortunately the GoLand releases do not completely match the Go plugin releases
def GO_PLUGIN_VERSION = IIC_VERSION
// The oldest supported versions.
def IIC_FROM_VERSION = '212.4746.92'
def GO_FROM_VERSION = '212.4746.93'

group 'com.squareup.cash.hermit'
version project.getProperties().getOrDefault("version", '1.0-SNAPSHOT')

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
    kotlinOptions.freeCompilerArgs = ["-Xjvm-default=enable"]
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.1.0'
}

intellij {
    // Note: The IntelliJ version below needs to match the go plugin version as defined here:
    // https://plugins.jetbrains.com/plugin/9568-go/versions
    version = IIC_VERSION
    type = 'IU'
    plugins = [
            "gradle",
            "java",
            "terminal",
            "org.jetbrains.plugins.go:" + GO_PLUGIN_VERSION,
            // needed by Go plugin. See https://github.com/JetBrains/gradle-intellij-plugin/issues/1056
            "org.intellij.intelliLang"
    ]
}

runIde {
    // Uncomment this, and set your path accordingly, if you want to debug on GoLand
    // ideDirectory '/Users/juho/Library/Application Support/JetBrains/Toolbox/apps/Goland/ch-0/203.6682.164/GoLand.app/Contents'
}

patchPluginXml {
    sinceBuild = IIC_FROM_VERSION
    version = System.getenv("IJ_PLUGIN_VERSION")
}

runPluginVerifier {
    // These need to match the versions from
    // https://data.services.jetbrains.com/products?fields=code,name,releases.downloads,releases.version,releases.build,releases.type&code=IIC,IIE,GO
    ideVersions = ['IIC-' + IIC_FROM_VERSION, 'GO-' + GO_FROM_VERSION, 'IIC-'+ IIC_VERSION, 'GO-' + GO_VERSION]
    failureLevel = EnumSet.complementOf(
            EnumSet.of(
                    // skipping missing dependencies as com.intellij.java provided by IJ raises a false warning
                    RunPluginVerifierTask.FailureLevel.MISSING_DEPENDENCIES,
                    // skipping experimental API usage, as delaying Gradle execution relies on experimental GradleExecutionAware.
                    // if the API changes, we should be able to detect that in our tests when a new version comes out.
                    RunPluginVerifierTask.FailureLevel.EXPERIMENTAL_API_USAGES
            )
    )

}

publishPlugin {
    token = System.getenv("JETBRAINS_TOKEN")
}

apply plugin: 'kotlin-kapt'

def arrow_version = "0.11.0"
dependencies {
    implementation "io.arrow-kt:arrow-core:$arrow_version"
    implementation "io.arrow-kt:arrow-syntax:$arrow_version"
    kapt    "io.arrow-kt:arrow-meta:$arrow_version"
}

// See https://youtrack.jetbrains.com/issue/KTIJ-782
tasks.buildSearchableOptions {
    enabled = false
}

tasks.test {
    systemProperty("idea.force.use.core.classloader", "true")
}
